#!/usr/bin/env ruby
require "open3"
require "json"
require "io/console"

$queries = DATA.read
data = nil

Open3.popen2(*%w[gh api graphql -F query=@- -f operationName=getNotifications --cache=1m -H GraphQL-Features:discussions_api]) do |stdin, stdout, wait_thread|
  stdin.write($queries)
  stdin.close
  status = wait_thread.value
  exit(status.exitstatus) unless status.success?
  data = JSON.parse(stdout.read)
end

def shorten(str)
  lines = str.lines
  if lines.size > 6
    lines = lines[0..6]+["..."]
  end
  lines.join("")
end

def colorize(color, str)
  "\e[%sm%s\e[m" % [color, str]
end

def wrap(str)
  Open3.popen2(*%w[fold -w 80 -s]) do |stdin, stdout, wait_thread|
    stdin.write(str)
    stdin.close
    status = wait_thread.value
    raise status unless status.success?
    stdout.read
  end
end

exit_status = 0
data.dig("data", "viewer", "notificationThreads", "nodes").each do |nt|
  puts "\e[H\e[2J" if exit_status.zero?
  puts
  puts "  %s   %s   %s   %s" % [
    colorize("30;47", "(N)") + colorize("1", " skip "),
    colorize("30;47", "(D)") + colorize("1", " mark done "),
    colorize("30;47", "(O)") + colorize("1", " open in browser "),
    colorize("30;47", "(M)") + colorize("1", " unsubscribe "),
  ]
  puts
  repo = nt.dig("subject", "url").split("/")[3..4].join("/")
  puts "%s %s" % [colorize("1", "[#{repo}]"), colorize("1;34", nt["title"])]
  puts
  puts wrap("@" + nt.dig("summaryItemAuthor", "login") + ": " + shorten(nt["summaryItemBody"]))
  puts
  puts

  mark_done = -> {
    Open3.popen2(*%W[gh api graphql -F query=@- -f operationName=markDone -f threadID=#{nt["id"]} --silent -H GraphQL-Features:discussions_api]) do |stdin, stdout, wait_thread|
      stdin.write($queries)
      stdin.close
      status = wait_thread.value
      exit_status = status.exitstatus
    end
  }

  resolved = false
  until resolved
    case c = $stdin.getch
    when "n"
      exit_status = 0
      resolved = true
    when "d"
      mark_done.()
      resolved = true
    when "m"
      mark_done.()
      Open3.popen2(*%W[gh api graphql -F query=@- -f operationName=unsubscribe -f subjectID=#{nt.dig("subject", "id")} --silent -H GraphQL-Features:discussions_api]) do |stdin, stdout, wait_thread|
        stdin.write($queries)
        stdin.close
        status = wait_thread.value
        exit_status = status.exitstatus
      end
      resolved = true
    when "o"
      open_cmd = RUBY_PLATFORM =~ /darwin/ ? "open" : "xdg-open"
      system open_cmd, nt.dig("subject", "url")
      sleep 1
      exit_status = 0
      resolved = true
    when "\u0003"
      exit(1)
    end
  end
end

__END__
query getNotifications {
  viewer {
    notificationThreads(first: 20, filterBy: {statuses: [READ, UNREAD]}) {
      nodes {
        id
        isUnread
        threadType
        reason
        title
        summaryItemBody
        summaryItemAuthor {
          login
        }
        subject {
          ... on Issue {
            id
            url
          }
          ... on PullRequest {
            id
            url
          }
          ... on TeamDiscussion {
            id
            url
          }
          ... on Discussion {
            id
            url
          }
          ... on Release {
            id
            url
          }
        }
      }
      pageInfo {
        hasNextPage
        endCursor
      }
    }
  }
}
mutation markDone($threadID: ID!) {
  markNotificationAsDone(input: {id: $threadID}) {
    clientMutationId
  }
}
mutation unsubscribe($subjectID: ID!) {
  updateSubscription(input: {subscribableId: $subjectID, state: UNSUBSCRIBED}) {
    clientMutationId
  }
}
